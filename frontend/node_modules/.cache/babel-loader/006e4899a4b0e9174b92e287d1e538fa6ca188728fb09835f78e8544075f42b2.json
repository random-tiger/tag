{"ast":null,"code":"import _objectSpread from\"/Users/bbassett/simple/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect}from'react';import{apiClient}from'../services/api';import toast from'react-hot-toast';// Initial state\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialState={stories:[],currentStory:null,loading:false,error:null,generationStatus:{}};// Action types\nconst ActionTypes={SET_LOADING:'SET_LOADING',SET_ERROR:'SET_ERROR',SET_STORIES:'SET_STORIES',SET_CURRENT_STORY:'SET_CURRENT_STORY',ADD_STORY:'ADD_STORY',UPDATE_STORY:'UPDATE_STORY',UPDATE_GENERATION_STATUS:'UPDATE_GENERATION_STATUS',CLEAR_ERROR:'CLEAR_ERROR'};// Reducer\nfunction storyReducer(state,action){var _state$currentStory;switch(action.type){case ActionTypes.SET_LOADING:return _objectSpread(_objectSpread({},state),{},{loading:action.payload});case ActionTypes.SET_ERROR:return _objectSpread(_objectSpread({},state),{},{error:action.payload,loading:false});case ActionTypes.CLEAR_ERROR:return _objectSpread(_objectSpread({},state),{},{error:null});case ActionTypes.SET_STORIES:return _objectSpread(_objectSpread({},state),{},{stories:action.payload,loading:false});case ActionTypes.SET_CURRENT_STORY:return _objectSpread(_objectSpread({},state),{},{currentStory:action.payload,loading:false});case ActionTypes.ADD_STORY:return _objectSpread(_objectSpread({},state),{},{stories:[action.payload,...state.stories],loading:false});case ActionTypes.UPDATE_STORY:return _objectSpread(_objectSpread({},state),{},{stories:state.stories.map(story=>story.id===action.payload.id?action.payload:story),currentStory:((_state$currentStory=state.currentStory)===null||_state$currentStory===void 0?void 0:_state$currentStory.id)===action.payload.id?action.payload:state.currentStory,loading:false});case ActionTypes.UPDATE_GENERATION_STATUS:return _objectSpread(_objectSpread({},state),{},{generationStatus:_objectSpread(_objectSpread({},state.generationStatus),{},{[action.payload.operationId]:action.payload.status})});default:return state;}}// Create context\nconst StoryContext=/*#__PURE__*/createContext();// Provider component\nexport function StoryProvider(_ref){let{children}=_ref;const[state,dispatch]=useReducer(storyReducer,initialState);// Helper function to handle API errors\nconst handleApiError=function(error){var _error$response,_error$response$data;let defaultMessage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'An error occurred';const message=(error===null||error===void 0?void 0:(_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||(error===null||error===void 0?void 0:error.message)||defaultMessage;dispatch({type:ActionTypes.SET_ERROR,payload:message});toast.error(message);};// Load stories\nconst loadStories=async function(){let userId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'anonymous';try{dispatch({type:ActionTypes.SET_LOADING,payload:true});dispatch({type:ActionTypes.CLEAR_ERROR});const response=await apiClient.get(\"/stories?user_id=\".concat(userId));dispatch({type:ActionTypes.SET_STORIES,payload:response.data.stories});}catch(error){handleApiError(error,'Failed to load stories');}};// Create new story\nconst createStory=async function(title){let description=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';let userId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'anonymous';try{dispatch({type:ActionTypes.SET_LOADING,payload:true});dispatch({type:ActionTypes.CLEAR_ERROR});const response=await apiClient.post('/stories',{title,description,user_id:userId});dispatch({type:ActionTypes.ADD_STORY,payload:response.data});toast.success('Story created successfully!');return response.data;}catch(error){handleApiError(error,'Failed to create story');throw error;}};// Load specific story\nconst loadStory=async storyId=>{try{dispatch({type:ActionTypes.SET_LOADING,payload:true});dispatch({type:ActionTypes.CLEAR_ERROR});const response=await apiClient.get(\"/stories/\".concat(storyId));dispatch({type:ActionTypes.SET_CURRENT_STORY,payload:response.data});return response.data;}catch(error){handleApiError(error,'Failed to load story');throw error;}};// Generate video segment\nconst generateVideoSegment=async function(storyId,prompt){let imageFile=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let usePreviousFrame=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;try{dispatch({type:ActionTypes.SET_LOADING,payload:true});dispatch({type:ActionTypes.CLEAR_ERROR});const formData=new FormData();formData.append('prompt',prompt);formData.append('use_previous_frame',usePreviousFrame.toString());if(imageFile){formData.append('image',imageFile);}const response=await apiClient.post(\"/stories/\".concat(storyId,\"/generate\"),formData,{headers:{'Content-Type':'multipart/form-data'}});// Start polling for status updates\nstartStatusPolling(response.data.operation_id);toast.success('Video generation started!');dispatch({type:ActionTypes.SET_LOADING,payload:false});return response.data;}catch(error){handleApiError(error,'Failed to start video generation');throw error;}};// Stitch story videos\nconst stitchStory=async storyId=>{try{dispatch({type:ActionTypes.SET_LOADING,payload:true});dispatch({type:ActionTypes.CLEAR_ERROR});const response=await apiClient.post(\"/stories/\".concat(storyId,\"/stitch\"));// Reload the story to get updated data\nawait loadStory(storyId);toast.success('Story stitched successfully!');return response.data;}catch(error){handleApiError(error,'Failed to stitch story');throw error;}};// Start polling for generation status\nconst startStatusPolling=operationId=>{const pollInterval=setInterval(async()=>{try{const response=await apiClient.get(\"/generation-status/\".concat(operationId));const status=response.data;dispatch({type:ActionTypes.UPDATE_GENERATION_STATUS,payload:{operationId,status}});if(status.status==='completed'){clearInterval(pollInterval);toast.success('Video generation completed!');// Reload current story if it matches\nif(state.currentStory&&status.segment_id){loadStory(state.currentStory.id);}}else if(status.status==='failed'){clearInterval(pollInterval);toast.error(\"Video generation failed: \".concat(status.error||'Unknown error'));}}catch(error){// Silently handle polling errors to avoid spam\nconsole.error('Status polling error:',error);clearInterval(pollInterval);}},15000);// Poll every 15 seconds\n// Clear polling after 10 minutes\nsetTimeout(()=>clearInterval(pollInterval),600000);};// Context value\nconst contextValue=_objectSpread(_objectSpread({},state),{},{actions:{loadStories,createStory,loadStory,generateVideoSegment,stitchStory,clearError:()=>dispatch({type:ActionTypes.CLEAR_ERROR})}});return/*#__PURE__*/_jsx(StoryContext.Provider,{value:contextValue,children:children});}// Hook to use the story context\nexport function useStory(){const context=useContext(StoryContext);if(!context){throw new Error('useStory must be used within a StoryProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","apiClient","toast","jsx","_jsx","initialState","stories","currentStory","loading","error","generationStatus","ActionTypes","SET_LOADING","SET_ERROR","SET_STORIES","SET_CURRENT_STORY","ADD_STORY","UPDATE_STORY","UPDATE_GENERATION_STATUS","CLEAR_ERROR","storyReducer","state","action","_state$currentStory","type","_objectSpread","payload","map","story","id","operationId","status","StoryContext","StoryProvider","_ref","children","dispatch","handleApiError","_error$response","_error$response$data","defaultMessage","arguments","length","undefined","message","response","data","loadStories","userId","get","concat","createStory","title","description","post","user_id","success","loadStory","storyId","generateVideoSegment","prompt","imageFile","usePreviousFrame","formData","FormData","append","toString","headers","startStatusPolling","operation_id","stitchStory","pollInterval","setInterval","clearInterval","segment_id","console","setTimeout","contextValue","actions","clearError","Provider","value","useStory","context","Error"],"sources":["/Users/bbassett/simple/frontend/src/contexts/StoryContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { apiClient } from '../services/api';\nimport toast from 'react-hot-toast';\n\n// Initial state\nconst initialState = {\n  stories: [],\n  currentStory: null,\n  loading: false,\n  error: null,\n  generationStatus: {},\n};\n\n// Action types\nconst ActionTypes = {\n  SET_LOADING: 'SET_LOADING',\n  SET_ERROR: 'SET_ERROR',\n  SET_STORIES: 'SET_STORIES',\n  SET_CURRENT_STORY: 'SET_CURRENT_STORY',\n  ADD_STORY: 'ADD_STORY',\n  UPDATE_STORY: 'UPDATE_STORY',\n  UPDATE_GENERATION_STATUS: 'UPDATE_GENERATION_STATUS',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n};\n\n// Reducer\nfunction storyReducer(state, action) {\n  switch (action.type) {\n    case ActionTypes.SET_LOADING:\n      return { ...state, loading: action.payload };\n    \n    case ActionTypes.SET_ERROR:\n      return { ...state, error: action.payload, loading: false };\n    \n    case ActionTypes.CLEAR_ERROR:\n      return { ...state, error: null };\n    \n    case ActionTypes.SET_STORIES:\n      return { ...state, stories: action.payload, loading: false };\n    \n    case ActionTypes.SET_CURRENT_STORY:\n      return { ...state, currentStory: action.payload, loading: false };\n    \n    case ActionTypes.ADD_STORY:\n      return { \n        ...state, \n        stories: [action.payload, ...state.stories], \n        loading: false \n      };\n    \n    case ActionTypes.UPDATE_STORY:\n      return {\n        ...state,\n        stories: state.stories.map(story => \n          story.id === action.payload.id ? action.payload : story\n        ),\n        currentStory: state.currentStory?.id === action.payload.id \n          ? action.payload \n          : state.currentStory,\n        loading: false\n      };\n    \n    case ActionTypes.UPDATE_GENERATION_STATUS:\n      return {\n        ...state,\n        generationStatus: {\n          ...state.generationStatus,\n          [action.payload.operationId]: action.payload.status\n        }\n      };\n    \n    default:\n      return state;\n  }\n}\n\n// Create context\nconst StoryContext = createContext();\n\n// Provider component\nexport function StoryProvider({ children }) {\n  const [state, dispatch] = useReducer(storyReducer, initialState);\n\n  // Helper function to handle API errors\n  const handleApiError = (error, defaultMessage = 'An error occurred') => {\n    const message = error?.response?.data?.error || error?.message || defaultMessage;\n    dispatch({ type: ActionTypes.SET_ERROR, payload: message });\n    toast.error(message);\n  };\n\n  // Load stories\n  const loadStories = async (userId = 'anonymous') => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      dispatch({ type: ActionTypes.CLEAR_ERROR });\n      \n      const response = await apiClient.get(`/stories?user_id=${userId}`);\n      dispatch({ type: ActionTypes.SET_STORIES, payload: response.data.stories });\n      \n    } catch (error) {\n      handleApiError(error, 'Failed to load stories');\n    }\n  };\n\n  // Create new story\n  const createStory = async (title, description = '', userId = 'anonymous') => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      dispatch({ type: ActionTypes.CLEAR_ERROR });\n      \n      const response = await apiClient.post('/stories', {\n        title,\n        description,\n        user_id: userId\n      });\n      \n      dispatch({ type: ActionTypes.ADD_STORY, payload: response.data });\n      toast.success('Story created successfully!');\n      \n      return response.data;\n      \n    } catch (error) {\n      handleApiError(error, 'Failed to create story');\n      throw error;\n    }\n  };\n\n  // Load specific story\n  const loadStory = async (storyId) => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      dispatch({ type: ActionTypes.CLEAR_ERROR });\n      \n      const response = await apiClient.get(`/stories/${storyId}`);\n      dispatch({ type: ActionTypes.SET_CURRENT_STORY, payload: response.data });\n      \n      return response.data;\n      \n    } catch (error) {\n      handleApiError(error, 'Failed to load story');\n      throw error;\n    }\n  };\n\n  // Generate video segment\n  const generateVideoSegment = async (storyId, prompt, imageFile = null, usePreviousFrame = false) => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      dispatch({ type: ActionTypes.CLEAR_ERROR });\n      \n      const formData = new FormData();\n      formData.append('prompt', prompt);\n      formData.append('use_previous_frame', usePreviousFrame.toString());\n      \n      if (imageFile) {\n        formData.append('image', imageFile);\n      }\n      \n      const response = await apiClient.post(`/stories/${storyId}/generate`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      \n      // Start polling for status updates\n      startStatusPolling(response.data.operation_id);\n      \n      toast.success('Video generation started!');\n      dispatch({ type: ActionTypes.SET_LOADING, payload: false });\n      \n      return response.data;\n      \n    } catch (error) {\n      handleApiError(error, 'Failed to start video generation');\n      throw error;\n    }\n  };\n\n  // Stitch story videos\n  const stitchStory = async (storyId) => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      dispatch({ type: ActionTypes.CLEAR_ERROR });\n      \n      const response = await apiClient.post(`/stories/${storyId}/stitch`);\n      \n      // Reload the story to get updated data\n      await loadStory(storyId);\n      \n      toast.success('Story stitched successfully!');\n      \n      return response.data;\n      \n    } catch (error) {\n      handleApiError(error, 'Failed to stitch story');\n      throw error;\n    }\n  };\n\n  // Start polling for generation status\n  const startStatusPolling = (operationId) => {\n    const pollInterval = setInterval(async () => {\n      try {\n        const response = await apiClient.get(`/generation-status/${operationId}`);\n        const status = response.data;\n        \n        dispatch({\n          type: ActionTypes.UPDATE_GENERATION_STATUS,\n          payload: { operationId, status }\n        });\n        \n        if (status.status === 'completed') {\n          clearInterval(pollInterval);\n          toast.success('Video generation completed!');\n          \n          // Reload current story if it matches\n          if (state.currentStory && status.segment_id) {\n            loadStory(state.currentStory.id);\n          }\n          \n        } else if (status.status === 'failed') {\n          clearInterval(pollInterval);\n          toast.error(`Video generation failed: ${status.error || 'Unknown error'}`);\n        }\n        \n      } catch (error) {\n        // Silently handle polling errors to avoid spam\n        console.error('Status polling error:', error);\n        clearInterval(pollInterval);\n      }\n    }, 15000); // Poll every 15 seconds\n    \n    // Clear polling after 10 minutes\n    setTimeout(() => clearInterval(pollInterval), 600000);\n  };\n\n  // Context value\n  const contextValue = {\n    ...state,\n    actions: {\n      loadStories,\n      createStory,\n      loadStory,\n      generateVideoSegment,\n      stitchStory,\n      clearError: () => dispatch({ type: ActionTypes.CLEAR_ERROR }),\n    }\n  };\n\n  return (\n    <StoryContext.Provider value={contextValue}>\n      {children}\n    </StoryContext.Provider>\n  );\n}\n\n// Hook to use the story context\nexport function useStory() {\n  const context = useContext(StoryContext);\n  if (!context) {\n    throw new Error('useStory must be used within a StoryProvider');\n  }\n  return context;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}