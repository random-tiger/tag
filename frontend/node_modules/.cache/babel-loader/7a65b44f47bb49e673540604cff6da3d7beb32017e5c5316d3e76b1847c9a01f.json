{"ast":null,"code":"var _jsxFileName = \"/Users/bbassett/simple/frontend/src/contexts/StoryContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { apiClient } from '../services/api';\nimport toast from 'react-hot-toast';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  stories: [],\n  currentStory: null,\n  loading: false,\n  error: null,\n  generationStatus: {}\n};\n\n// Action types\nconst ActionTypes = {\n  SET_LOADING: 'SET_LOADING',\n  SET_ERROR: 'SET_ERROR',\n  SET_STORIES: 'SET_STORIES',\n  SET_CURRENT_STORY: 'SET_CURRENT_STORY',\n  ADD_STORY: 'ADD_STORY',\n  UPDATE_STORY: 'UPDATE_STORY',\n  UPDATE_GENERATION_STATUS: 'UPDATE_GENERATION_STATUS',\n  CLEAR_ERROR: 'CLEAR_ERROR'\n};\n\n// Reducer\nfunction storyReducer(state, action) {\n  var _state$currentStory;\n  switch (action.type) {\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case ActionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case ActionTypes.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case ActionTypes.SET_STORIES:\n      return {\n        ...state,\n        stories: action.payload,\n        loading: false\n      };\n    case ActionTypes.SET_CURRENT_STORY:\n      return {\n        ...state,\n        currentStory: action.payload,\n        loading: false\n      };\n    case ActionTypes.ADD_STORY:\n      return {\n        ...state,\n        stories: [action.payload, ...state.stories],\n        loading: false\n      };\n    case ActionTypes.UPDATE_STORY:\n      return {\n        ...state,\n        stories: state.stories.map(story => story.id === action.payload.id ? action.payload : story),\n        currentStory: ((_state$currentStory = state.currentStory) === null || _state$currentStory === void 0 ? void 0 : _state$currentStory.id) === action.payload.id ? action.payload : state.currentStory,\n        loading: false\n      };\n    case ActionTypes.UPDATE_GENERATION_STATUS:\n      return {\n        ...state,\n        generationStatus: {\n          ...state.generationStatus,\n          [action.payload.operationId]: action.payload.status\n        }\n      };\n    default:\n      return state;\n  }\n}\n\n// Create context\nconst StoryContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport function StoryProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(storyReducer, initialState);\n\n  // Helper function to handle API errors\n  const handleApiError = (error, defaultMessage = 'An error occurred') => {\n    var _error$response, _error$response$data;\n    const message = (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || (error === null || error === void 0 ? void 0 : error.message) || defaultMessage;\n    dispatch({\n      type: ActionTypes.SET_ERROR,\n      payload: message\n    });\n    toast.error(message);\n  };\n\n  // Load stories\n  const loadStories = async (userId = 'anonymous') => {\n    try {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: ActionTypes.CLEAR_ERROR\n      });\n      const response = await apiClient.get(`/stories?user_id=${userId}`);\n      dispatch({\n        type: ActionTypes.SET_STORIES,\n        payload: response.data.stories\n      });\n    } catch (error) {\n      handleApiError(error, 'Failed to load stories');\n    }\n  };\n\n  // Create new story\n  const createStory = async (title, description = '', userId = 'anonymous') => {\n    try {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: ActionTypes.CLEAR_ERROR\n      });\n      const response = await apiClient.post('/stories', {\n        title,\n        description,\n        user_id: userId\n      });\n      dispatch({\n        type: ActionTypes.ADD_STORY,\n        payload: response.data\n      });\n      toast.success('Story created successfully!');\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Failed to create story');\n      throw error;\n    }\n  };\n\n  // Load specific story\n  const loadStory = async storyId => {\n    try {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: ActionTypes.CLEAR_ERROR\n      });\n      const response = await apiClient.get(`/stories/${storyId}`);\n      dispatch({\n        type: ActionTypes.SET_CURRENT_STORY,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Failed to load story');\n      throw error;\n    }\n  };\n\n  // Generate video segment\n  const generateVideoSegment = async (storyId, prompt, imageFile = null, usePreviousFrame = false) => {\n    try {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: ActionTypes.CLEAR_ERROR\n      });\n      const formData = new FormData();\n      formData.append('prompt', prompt);\n      formData.append('use_previous_frame', usePreviousFrame.toString());\n      if (imageFile) {\n        formData.append('image', imageFile);\n      }\n      const response = await apiClient.post(`/stories/${storyId}/generate`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      // Start polling for status updates\n      startStatusPolling(response.data.operation_id);\n      toast.success('Video generation started!');\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: false\n      });\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Failed to start video generation');\n      throw error;\n    }\n  };\n\n  // Stitch story videos\n  const stitchStory = async storyId => {\n    try {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: ActionTypes.CLEAR_ERROR\n      });\n      const response = await apiClient.post(`/stories/${storyId}/stitch`);\n\n      // Reload the story to get updated data\n      await loadStory(storyId);\n      toast.success('Story stitched successfully!');\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Failed to stitch story');\n      throw error;\n    }\n  };\n\n  // Start polling for generation status\n  const startStatusPolling = operationId => {\n    const pollInterval = setInterval(async () => {\n      try {\n        const response = await apiClient.get(`/generation-status/${operationId}`);\n        const status = response.data;\n        dispatch({\n          type: ActionTypes.UPDATE_GENERATION_STATUS,\n          payload: {\n            operationId,\n            status\n          }\n        });\n        if (status.status === 'completed') {\n          clearInterval(pollInterval);\n          toast.success('Video generation completed!');\n\n          // Reload current story if it matches\n          if (state.currentStory && status.segment_id) {\n            loadStory(state.currentStory.id);\n          }\n        } else if (status.status === 'failed') {\n          clearInterval(pollInterval);\n          toast.error(`Video generation failed: ${status.error || 'Unknown error'}`);\n        }\n      } catch (error) {\n        // Silently handle polling errors to avoid spam\n        console.error('Status polling error:', error);\n        clearInterval(pollInterval);\n      }\n    }, 15000); // Poll every 15 seconds\n\n    // Clear polling after 10 minutes\n    setTimeout(() => clearInterval(pollInterval), 600000);\n  };\n\n  // Context value\n  const contextValue = {\n    ...state,\n    actions: {\n      loadStories,\n      createStory,\n      loadStory,\n      generateVideoSegment,\n      stitchStory,\n      clearError: () => dispatch({\n        type: ActionTypes.CLEAR_ERROR\n      })\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(StoryContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n}\n\n// Hook to use the story context\n_s(StoryProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = StoryProvider;\nexport function useStory() {\n  _s2();\n  const context = useContext(StoryContext);\n  if (!context) {\n    throw new Error('useStory must be used within a StoryProvider');\n  }\n  return context;\n}\n_s2(useStory, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"StoryProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","apiClient","toast","jsxDEV","_jsxDEV","initialState","stories","currentStory","loading","error","generationStatus","ActionTypes","SET_LOADING","SET_ERROR","SET_STORIES","SET_CURRENT_STORY","ADD_STORY","UPDATE_STORY","UPDATE_GENERATION_STATUS","CLEAR_ERROR","storyReducer","state","action","_state$currentStory","type","payload","map","story","id","operationId","status","StoryContext","StoryProvider","children","_s","dispatch","handleApiError","defaultMessage","_error$response","_error$response$data","message","response","data","loadStories","userId","get","createStory","title","description","post","user_id","success","loadStory","storyId","generateVideoSegment","prompt","imageFile","usePreviousFrame","formData","FormData","append","toString","headers","startStatusPolling","operation_id","stitchStory","pollInterval","setInterval","clearInterval","segment_id","console","setTimeout","contextValue","actions","clearError","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useStory","_s2","context","Error","$RefreshReg$"],"sources":["/Users/bbassett/simple/frontend/src/contexts/StoryContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { apiClient } from '../services/api';\nimport toast from 'react-hot-toast';\n\n// Initial state\nconst initialState = {\n  stories: [],\n  currentStory: null,\n  loading: false,\n  error: null,\n  generationStatus: {},\n};\n\n// Action types\nconst ActionTypes = {\n  SET_LOADING: 'SET_LOADING',\n  SET_ERROR: 'SET_ERROR',\n  SET_STORIES: 'SET_STORIES',\n  SET_CURRENT_STORY: 'SET_CURRENT_STORY',\n  ADD_STORY: 'ADD_STORY',\n  UPDATE_STORY: 'UPDATE_STORY',\n  UPDATE_GENERATION_STATUS: 'UPDATE_GENERATION_STATUS',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n};\n\n// Reducer\nfunction storyReducer(state, action) {\n  switch (action.type) {\n    case ActionTypes.SET_LOADING:\n      return { ...state, loading: action.payload };\n    \n    case ActionTypes.SET_ERROR:\n      return { ...state, error: action.payload, loading: false };\n    \n    case ActionTypes.CLEAR_ERROR:\n      return { ...state, error: null };\n    \n    case ActionTypes.SET_STORIES:\n      return { ...state, stories: action.payload, loading: false };\n    \n    case ActionTypes.SET_CURRENT_STORY:\n      return { ...state, currentStory: action.payload, loading: false };\n    \n    case ActionTypes.ADD_STORY:\n      return { \n        ...state, \n        stories: [action.payload, ...state.stories], \n        loading: false \n      };\n    \n    case ActionTypes.UPDATE_STORY:\n      return {\n        ...state,\n        stories: state.stories.map(story => \n          story.id === action.payload.id ? action.payload : story\n        ),\n        currentStory: state.currentStory?.id === action.payload.id \n          ? action.payload \n          : state.currentStory,\n        loading: false\n      };\n    \n    case ActionTypes.UPDATE_GENERATION_STATUS:\n      return {\n        ...state,\n        generationStatus: {\n          ...state.generationStatus,\n          [action.payload.operationId]: action.payload.status\n        }\n      };\n    \n    default:\n      return state;\n  }\n}\n\n// Create context\nconst StoryContext = createContext();\n\n// Provider component\nexport function StoryProvider({ children }) {\n  const [state, dispatch] = useReducer(storyReducer, initialState);\n\n  // Helper function to handle API errors\n  const handleApiError = (error, defaultMessage = 'An error occurred') => {\n    const message = error?.response?.data?.error || error?.message || defaultMessage;\n    dispatch({ type: ActionTypes.SET_ERROR, payload: message });\n    toast.error(message);\n  };\n\n  // Load stories\n  const loadStories = async (userId = 'anonymous') => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      dispatch({ type: ActionTypes.CLEAR_ERROR });\n      \n      const response = await apiClient.get(`/stories?user_id=${userId}`);\n      dispatch({ type: ActionTypes.SET_STORIES, payload: response.data.stories });\n      \n    } catch (error) {\n      handleApiError(error, 'Failed to load stories');\n    }\n  };\n\n  // Create new story\n  const createStory = async (title, description = '', userId = 'anonymous') => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      dispatch({ type: ActionTypes.CLEAR_ERROR });\n      \n      const response = await apiClient.post('/stories', {\n        title,\n        description,\n        user_id: userId\n      });\n      \n      dispatch({ type: ActionTypes.ADD_STORY, payload: response.data });\n      toast.success('Story created successfully!');\n      \n      return response.data;\n      \n    } catch (error) {\n      handleApiError(error, 'Failed to create story');\n      throw error;\n    }\n  };\n\n  // Load specific story\n  const loadStory = async (storyId) => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      dispatch({ type: ActionTypes.CLEAR_ERROR });\n      \n      const response = await apiClient.get(`/stories/${storyId}`);\n      dispatch({ type: ActionTypes.SET_CURRENT_STORY, payload: response.data });\n      \n      return response.data;\n      \n    } catch (error) {\n      handleApiError(error, 'Failed to load story');\n      throw error;\n    }\n  };\n\n  // Generate video segment\n  const generateVideoSegment = async (storyId, prompt, imageFile = null, usePreviousFrame = false) => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      dispatch({ type: ActionTypes.CLEAR_ERROR });\n      \n      const formData = new FormData();\n      formData.append('prompt', prompt);\n      formData.append('use_previous_frame', usePreviousFrame.toString());\n      \n      if (imageFile) {\n        formData.append('image', imageFile);\n      }\n      \n      const response = await apiClient.post(`/stories/${storyId}/generate`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      \n      // Start polling for status updates\n      startStatusPolling(response.data.operation_id);\n      \n      toast.success('Video generation started!');\n      dispatch({ type: ActionTypes.SET_LOADING, payload: false });\n      \n      return response.data;\n      \n    } catch (error) {\n      handleApiError(error, 'Failed to start video generation');\n      throw error;\n    }\n  };\n\n  // Stitch story videos\n  const stitchStory = async (storyId) => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      dispatch({ type: ActionTypes.CLEAR_ERROR });\n      \n      const response = await apiClient.post(`/stories/${storyId}/stitch`);\n      \n      // Reload the story to get updated data\n      await loadStory(storyId);\n      \n      toast.success('Story stitched successfully!');\n      \n      return response.data;\n      \n    } catch (error) {\n      handleApiError(error, 'Failed to stitch story');\n      throw error;\n    }\n  };\n\n  // Start polling for generation status\n  const startStatusPolling = (operationId) => {\n    const pollInterval = setInterval(async () => {\n      try {\n        const response = await apiClient.get(`/generation-status/${operationId}`);\n        const status = response.data;\n        \n        dispatch({\n          type: ActionTypes.UPDATE_GENERATION_STATUS,\n          payload: { operationId, status }\n        });\n        \n        if (status.status === 'completed') {\n          clearInterval(pollInterval);\n          toast.success('Video generation completed!');\n          \n          // Reload current story if it matches\n          if (state.currentStory && status.segment_id) {\n            loadStory(state.currentStory.id);\n          }\n          \n        } else if (status.status === 'failed') {\n          clearInterval(pollInterval);\n          toast.error(`Video generation failed: ${status.error || 'Unknown error'}`);\n        }\n        \n      } catch (error) {\n        // Silently handle polling errors to avoid spam\n        console.error('Status polling error:', error);\n        clearInterval(pollInterval);\n      }\n    }, 15000); // Poll every 15 seconds\n    \n    // Clear polling after 10 minutes\n    setTimeout(() => clearInterval(pollInterval), 600000);\n  };\n\n  // Context value\n  const contextValue = {\n    ...state,\n    actions: {\n      loadStories,\n      createStory,\n      loadStory,\n      generateVideoSegment,\n      stitchStory,\n      clearError: () => dispatch({ type: ActionTypes.CLEAR_ERROR }),\n    }\n  };\n\n  return (\n    <StoryContext.Provider value={contextValue}>\n      {children}\n    </StoryContext.Provider>\n  );\n}\n\n// Hook to use the story context\nexport function useStory() {\n  const context = useContext(StoryContext);\n  if (!context) {\n    throw new Error('useStory must be used within a StoryProvider');\n  }\n  return context;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}